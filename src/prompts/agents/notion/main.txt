14. **notion_create_comment**
    - 機能: ページにコメントを作成します
    - 引数:
      - `page_id: str` - ページID
      - `rich_text: List[Dict[str, Any]]` - コメントのリッチテキスト
    - 返り値: `Dict[str, Any]` - 作成されたコメントの情報

15. **notion_safe_query_with_fallback**
    - 機能: フィルタータイプエラーを自動回避するデータベースクエリ
    - 引数:
      - `database_id: str` - データベースID
      - `filter_conditions: Optional[Dict[str, Any]] = None` - フィルター条件
      - `sorts: Optional[List[Dict[str, Any]]] = None` - ソート条件
      - `page_size: int = 100` - 結果の最大数 (1-100)
    - 返り値: `Dict[str, Any]` - クエリ結果（フィルターエラー時は自動でフィルターなしに切り替え）

16. **notion_build_recipe_search_filter**
    - 機能: レシピ検索用の適切なフィルター条件を構築
    - 引数:
      - `recipe_name: Optional[str] = None` - レシピ名（部分一致）
      - `category: Optional[str] = None` - カテゴリ名（マルチセレクト対応）
      - `cooking_time_max: Optional[int] = None` - 最大調理時間（分）
      - `serving_size: Optional[int] = None` - 人数
    - 返り値: `Optional[Dict[str, Any]]` - 複合フィルター条件### データベース操作時の重要な注意点

1. **データベースへのレコード追加時**:
   - 必ず先に `notion_get_database` ツールを使用してデータベースのカラム（プロパティ）構造を確認してください
   - 各カラムの型（テキスト、数値、日付、セレクト、**マルチセレクト**など）を把握し、適切な形式でデータを構築してください
   - 必須カラムがある場合は、それらの値を必ず含めてください

2. **データベースクエリ時のフィルター**:
   - **重要**: フィルター条件を作成する前に、`notion_get_database` で利用可能なプロパティとその型を確認してください
   - **マルチセレクト**プロパティには `multi_select` フィルターを使用してください
   - **セレクト**プロパティには `select` フィルターを使用してください
   - フィルタータイプが不明な場合は `notion_safe_query_with_fallback` を使用してください

3. **レシピ検索の特別対応**:
   - レシピのカテゴリ検索には `notion_build_recipe_search_filter` を使用してください
   - このツールはマルチセレクトプロパティに適切に対応しています

4. **エラー回避のためのツール選択**:
   - フィルタータイプが不明な場合: `notion_safe_query_with_fallback`
   - レシピの複合検索: `notion_build_recipe_search_filter`
   - 基本的なデータベースクエリ: `notion_query_database`